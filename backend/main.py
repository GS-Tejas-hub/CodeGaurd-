from fastapi import FastAPI, File, UploadFile
from pydantic import BaseModel
from fpdf import FPDF
from fastapi.responses import FileResponse
import shutil
import os
import git
import zipfile
import subprocess
import requests
from worker import analyze_submission

app = FastAPI()

class URLItem(BaseModel):
    url: str

class CodeItem(BaseModel):
    code: str

@app.get("/")
def read_root():
    return {"Hello": "World"}

@app.post("/upload-zip/")
async def upload_zip(file: UploadFile = File(...)):
    results = analyze_submission("zip", {"filename": file.filename})
    return results

@app.post("/analyze-url/")
async def analyze_url(item: URLItem):
    results = analyze_submission("url", item.url)
    return results
    temp_dir = "temp_repo"
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
    os.makedirs(temp_dir)

    try:
        git.Repo.clone_from(item.url, temp_dir)
        
        jplag_command = [
            "java",
            "-jar",
            "jplag.jar", # Assuming jplag.jar is in the same directory
            "-l",
            "python3", # Assuming python, change as needed
            "-r",
            "jplag_results",
            temp_dir
        ]
        
        subprocess.run(jplag_command, check=True)
        
        # Process JPlag results here
        results = parse_jplag_results("jplag_results")
        
        return {"message": f"Repository cloned and analyzed successfully from {item.url}", "results": results}
    except Exception as e:
        return {"error": str(e)}

def parse_jplag_results(results_dir):
    # This is a placeholder for the actual parsing logic.
    # You would need to parse the HTML/JSON files generated by JPlag
    # to extract the similarity scores and code comparisons.
    return {"similarity_score": 87, "matches": [{"source": "GitHub repo XYZ", "similarity": 87}]}

@app.post("/analyze-paste/")
async def analyze_paste(item: CodeItem):
    results = analyze_submission("paste", item.code)
    return results

@app.post("/download-report/")
async def download_report(data: dict):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    
    pdf.cell(200, 10, txt="Analysis Report", ln=True, align='C')
    
    pdf.cell(200, 10, txt=f"Overall Similarity Score: {data['similarity_score']}%", ln=True)
    
    pdf.cell(200, 10, txt="Matches:", ln=True)
    for match in data['matches']:
        pdf.cell(200, 10, txt=f"  - Source: {match.get('source') or f'{match.get(file1)} - {match.get(file2)}'}", ln=True)
        pdf.cell(200, 10, txt=f"    Similarity: {match.get('similarity') or match.get('score')}", ln=True)
        
    if data.get('ai_detection'):
        pdf.cell(200, 10, txt="AI Detection:", ln=True)
        pdf.multi_cell(200, 10, txt=str(data['ai_detection']))
        
    report_path = "report.pdf"
    pdf.output(report_path)
    
    return FileResponse(report_path, media_type='application/pdf', filename='report.pdf')
